Неделя 5.
Ответы на вопросы в конце урока:

1. Почему в большинстве ситуаций стоит использовать flexbox-позиционирование?
Потому что использование флексов делает процесс верстки более гибким и удобным. Флекс-контейнер позволяет манипулировать
объектами внутри себя по двум осям, что позволяет упорядочить и расположить быстро и просто. К тому же сами флексы более
пластичные и подходят для реализации сложных проектов.

2.Самостоятельно изучите способ позиционирования через display: table  и ответьте на вопрос,
для каких ситуаций оно лучше всего подходит?
Позиционирование display: table можно использовать в верстке, когда нам требуется создать таблицу, которая также будет
поддерживаться браузерами. В настоящее время табличная верстка считается неактуальной, тем не менее есть случаи, когда
display: table может облегчить работу. Например, выводить таблицы только на более широких макетах, а для меньших экранов
сохранять стандартное расположение блоков. Также с помощью display: table можно получить истинное выравнивание по вертикали
элементов с динамической высотой. Для выравнивания динамических элементов по горизонтали без побочных эффектов можно
использовать display: table и margin: autо вместо блочно-строчной структуры и применения text-align: center. Ещё с помощью
этого способа можно добиться динамически прилипающего футера.

3. Какими способами можно сделать горизонтальное выравнивание по центру? Минимум 3 варианта, можно больше.
1) Центрирование строк текста в абзаце или заголовке с помощью свойства text-align.
2) Центрирование блока или изображения - работает только на блоках с фиксированной шириной путем установки свойств
margin-left и margin-right: auto, так они будут равными. Изображение необходимо поместить в контейнер, так он встанет
по центру.
3) С помощью абсолютного позиционирования контейнера с заданными отступами:
Например: position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%) }
4) Через свойство флексбокса justify-content: center.

4.Какие есть оси во флекс-верстке и как задается их направление?
2 оси - главная (слева-направо) и поперечная (сверху вниз).
Направление по главной оси путем свойства flex-direction со значениями row, row-reverse, column и column-reverse.
Направление по поперечной оси через свойство flex-wrap со значениями  wrap и wrap-reverse.

5. Разберитесь, как работает свойство margin: auto во флекс-верстке, приведите пример использования.
Атрибут margin со значением auto используется для создания разделённой навигации. Атрибут с таким значением будет занимать
все доступное пространство в своём измерении. Это работает для одного объекта в наборе с flex-элементами, выровненных
с начала (при помощи justify-self).Установив значение атрибутов margin-left и margin-right в значение auto, обе стороны
такого блока попытаются занять все доступное пространство и, таким образом, заставят двигаться блок в центр.Как только 
для элемента со свойством margin: auto не остаётся свободного места, он станет вести себя также, как и все остальные 
flex элементы, и сократится в объёме, пытаясь уместиться в доступное пространство.

<div class="box">
  <div>One</div>
  <div>Two</div>
  <div>Three</div>
  <div class="push">Four</div>
  <div>Five</div>
</div>

.box {
  display: flex;
}
.push {
    margin-left: auto;
}

6. В чем преимущества box-sizing?
Свойство box-sizing определяет как вычисляется общая ширина и высота элемента. У этого свойства есть два значения:
- content-box даёт стандартное поведение свойства box-sizing. То есть если у элемента установлена ширина или высота 100%,
то при добавлении границ и внутр. отступов они добавятся к общей ширине (высоте) элемента, таким образом конечная ширина
(высота) будет больше 100%.
- border-box говорит браузеру учитывать любые границы и внутренние отступы в значениях, которые присваиваются эелементу.
Таким образом содержимое элемента будет оставаться в пределах контейнера вместе с границами и внутренними отступами.
Часто выставление box-sizing: border-box полезно для размещения элементов. Оно сильно упрощает работу с размерами
элементов.

7. Чем отличается flex-grow от flex-shrink?
flex-grow задает коэффициент увеличения гибкости, который определяет, насколько увеличится flex-элемент относительно
остальных flex-элементов в контейнере flex при распределении положительного свободного пространства.Если
коэффициент одинаков для всех, и в гибком контейнере есть положительное свободное место, то оно будет распределено поровну
для всех.
flex-shrink задает коэффициент усадки flex, который определяет, насколько элемент flex будет сжиматься относительно 
остальных элементов flex в контейнере flex при распределении отрицательного свободного пространства.Пока flex-shrink
имеет положительное значение, элементы будут сжиматься, чтобы они не переполняли контейнер.
То есть flex-grow занимается добавлением доступного пространства, flex-shrink управляет удалением пространства,
чтобы элементы помещались в контейнер без переполнения.

8. 
<div class="box">
  <div>One</div>
  <div>Two</div>
  <div>Three</div>
  <div>Four</div>
  <div>Five</div>
</div>
.box {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

9. 148x18
10. Зачем нужно свойство order.
CSS свойство order устанавливает порядок следования флекс элемента в контейнере относительно остальных.
Если элемент не является флекс элементом (не находится внутри родительского элемента, который является блочным, или 
строчным флекс контейнером),то свойство order не окажет на такой элемент никакого эффекта.
По умолчанию значение свойства order у элемента равняется 0. Можно присвоить как положительное значение, так и отрицатель-
ное.

11. Вариант кода для создания таблицы:
<table border="1">
        <tr>
            <th>Column 1</th>
            <th>Column 2</th>
            <th>Column 3</th>
        </tr>
        <tr>
            <td rowspan="2">Row 1 Cell 1</td><td>Row 1 Cell 2</td><td>Row 1 Cell 2</td>
        </tr>
        <tr>
            <td>Row 2 Cell 2</td>
            <td>Row 2 Cell 3</td>
        </tr>
        <tr>
            <td colspan="3">Row 3 Cell 1</td>
        </tr>
    </table>
12. Изучите материалы и найдите, для каких ситуаций подходит position: fixed?
position: fixed подходит для создания плавающего элемента, который будет оставаться в том же положении при прокрутке
страницы. Это подходит для создание постоянного блока-навигации, чтобы пользователь всегда мог воспользоваться навигацией.

13.Каким способом лучше всего верстать большие блоки текста?
Для больших объемов текста подходит блочная модель.Блочные элементы, как правило, используются для больших кусков контента,
таких как заголовки и структурные элементы. 

14. Как рассчитывается размер flex-контейнера?
Размер flex-контейнера рассчитывается так: определеяем внутренним содержанием блока его шириной и высотой, а потом к этому 
прибавляем все отступы и границы.
ширина = margin-right + border-right + padding-right + width + padding-left + border-left + margin-left
высота =margin-top + border-top + padding-top + height + padding-bottom + border-bottom + margin-bottom



1. Какие есть способы объявления функций?

Function Declaration, Function Expression, arrow function.

2. Приведите примеры вызова одной и той же функции всеми известными вам способами.

Вызов функции одинаков вне зависимости от её создания (способа объявления).
Например:
sayHi();
Но можно ещё вызвать через:
console.log();
alert();

3. В чём разница между тестированием и отладкой (дебаггингом)? А что такое логирование?

Тестирование - это запуск кода для проверки его работоспособности, валидности и корректности.
Отладка (дебаггинг) - это процесс поиска и исправления найденных ошибок в коде.
Логирование - это вывод сообщения из кода в консоль (через console.log();).

4. В чём разница между Function Expression и Function Declaration? 

Function Declaration позволяет объявить (создать) функцию как отдельную инструкцию в коде.
Function Expression позволяет сначала создать переменную с именем функции, а затем объявить функцию.
После фигурных скобок Function Declaration не ставится точка с запятой, а после Function Expression ставится, так как
это выражение присваивания.

5. Что делает функция console.log()?

Выводит аргумент функции или значение переменной/операции в консоль по запросу, таким образом разработчик может увидеть
правильное выполнение кода.

6. По какой причине, мы можем использовать до объявления функцию, объявленную через Function Declaration,
но не можем ту, которая объявлена через Function Expression?

Причина в том, как работает компилятор кода. Он не работает сверху-вниз, поочередно выполняя строчки кода, а сначала
находит и объявляет все функции, затем объявляет все переменные с var и каждой из них значение undefined.
При Function Expression сначала объявляется переменная с неизвестным значением и она получает значение undefined, а потом
объявляется функция, которая также равна undefined.

7. Что такое глобальная зона видимости функций?

Это область видимости вне любых функций, то есть правила согласно которым движок ищет переменную или функцию по имени.

8. Вернется 28.

9. Получится 5.

10. Будет ошибка. Uncaught ReferenceError: Cannot access 'foo' before initialization









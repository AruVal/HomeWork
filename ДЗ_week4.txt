1. Какими способами можно подключать CSS-стили?

1 способ. С помощью атрибута style.
2 способ. С помощью тега <style>.
3 способ. С помощью тега <link> и отдельного файла css-формата.
4 способ. С помощью правила @import.

2. Зачем нужен Normalize.css?

Normalize.css — это небольшой CSS-файл, 
который обеспечивает для HTML-элементов лучшую кроссбраузерность в стилях по умолчанию.
Это современная, готовая к HTML5 альтернатива традиционному reset.css.

Цели normalize.css:
сохранять полезные настройки браузера, а не стирать их;
нормализовать стили для широкого круга HTML-элементов;
корректировать ошибки и основные несоответствия браузера;
совершенствовать юзабилити незаметными улучшениями;
объяснять код, используя комментарии и детальную документацию.

3. Что такое CSS-директивы?

Это специальные конструкции, которые начинаются с символа @.
Директивы чаще всего влияют на весь документ, но сами по себе ничего не стилизуют.
Например, директива @font-face позволяет подключать на страницу нестандартные шрифты,
которые потом можно использовать в свойстве font-family.
Или директива @media, которая при определённых условиях активирует или деактивирует какие-то CSS правила.
С помощью @media делают адаптивную вёрстку.
Директивы @charset задает кодировку символов.

4. В чем разница между margin и padding?

Padding — внутренний отступ,
margin — внешний отступ.

5. Как в CSS определяются приоритеты? Какое из свойств будет приоритетнее - #link .main или span #login?

1) если в HTML-коде уже есть описание стиля, то стиль CSS из отдельного файла будет отменен;
2) если в параметре тега указан атрибут style, то стиль, заданный через тег <style> будет отменен;
3) если в теге <style> указан стиль, то внешний стиль будет отменен.
Приоритетнее будет #link .main (0110).

6.В чем разница между CSS1 и CSS3?

Главное различие между CSS и CSS3 состоит в том, что CSS — это простой язык дизайна,
который позволяет создавать привлекательные веб-страницы,
тогда как CSS3 — это последняя третья версия языка каскадных таблиц стилей,
имеющая новые функции, позволяющие работать с веб-дизайном намного более эффективно.
1) Расширение селекторов. CSS3 расширяет базовую функциональность селектора атрибутов,
позволяя выбирать элементы на основе строк в значениях атрибутов.
2) Цвет. Спецификация цвета CSS3 определяет расширенный список ключевых слов цвета, которые поддерживаются веб-браузерами.
Список теперь включает дополнительные 147 ключевых слов цвета и новую модель под названием «RGBA».
3) Скругление границ блока. войство CSS «border-radius» определяет закругленные углы любого элемента,
что позволяет легко использовать закругленные углы в элементах дизайна.
4) Форматирование текста.  Новое свойство «text shadow» позволяет добавлять тени к отдельным символам в текстовых узлах.
5) Появление градиентов.
6) Переходы и анимация. Новая функция, называемая «transitions»,
 позволяет управлять скоростью анимации при переходе от одного значения свойства CSS к другому.

7. Что такое псевдоклассы? А псевдоэлементы?

Псевдокласс — это селектор, который выбирает элементы, находящиеся в специфическом состоянии.
Они обычно действуют так, как если бы вы применили класс к какой-то части вашего документа,
что часто помогает сократить избыточные классы в разметке и даёт более гибкий, удобный в поддержке код.
Псевдоклассы начинаются с двоеточия.

Псевдоэлементы ведут себя сходным образом, однако они действуют так,
как если бы вы добавили в разметку целый новый HTML-элемент, а не применили класс к существующим элементам.
Псевдоэлементы начинаются с двойного двоеточия.

8. Плохие теги.

"Плохие теги" попросту отвечают за внешнее представление элемента (как тег <small>),
и их можно заменить на нечто более значимое, либо использовать вместо них CSS.
Другие же могут не только определять визуальное представление,
но и быть к тому же излишне громоздки (как тег <font>) или
ужасно пагубны для удобства использования веб-страницы (как тег <blink>).

Список:
<u>, <center>, <layer>, <blink> или <marquee>, <font>, <b>, <i>,
<big>, <small>, <hr>.

9. Как можно подключать шрифты локально?

Правило @font-face src позволяет задать название локального шрифта,
т.е. если у пользователя на компьютере уже установлен нужный шрифт,
то будет использоваться именно он, при этом существенно увеличится скорость загрузки и отрисовки страницы.

10. Почему не стоит использовать сокращенную запись без необходимости?
И если все же использовать, как это делать правильно?

Сокращённые свойства - это такие CSS-свойства,
которые позволяют одновременно устанавливать значения нескольких других свойств.
Используя сокращённое свойство, вы можете писать более сжатые (и часто более читаемые) таблицы стилей,
экономя время и энергию.

1. Для значения, которое не указано, устанавливается его начальное значение.
Это означает, что оно переопределяет ранее установленные значения, то есть возвращает настройки по умолчанию.
2. Могут наследоваться только отдельные значения свойств.
Поскольку отсутствующие значения заменяются их начальным значением,
невозможно разрешить наследование отдельных свойств, опуская их.
Ключевое inheritслово может быть применено к свойству, но только в целом,
а не как ключевое слово для того или иного значения.
3. Сокращенные свойства стараются не навязывать определенный порядок значений свойств, которые они заменяют.
Это хорошо работает, когда эти свойства используют значения разных типов,
поскольку порядок не имеет значения, но это не так просто, когда несколько свойств могут иметь одинаковые значения.
Особенно это касается отступов, границ и углов.

Для правильного применения сокращенной записи свойств можно:
- группировать свойства одинаковой группы по смыслу
font-family, font-size, font-weight, font-height - можно объединить в font с перечислением всех параметров в строку.
- не переопределять значения ранее заданных свойств, а если надо, то не использовать сокращенную запись.

11.  Как сделать анимацию через CSS?
В процессе.
